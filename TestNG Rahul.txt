TestNG Installation:
----------------------------------------------------------------------------------------------------------------------------------------------------------
we need to download testng from market place
To check whether testng is installed in eclipse or not need to select Window-Preferences -search with TestNG
How to run tests with TestNG?
we need to have @Test annotation followed by methods
we can define multiple tests from single class
If we want to create XML file select project-TestNG-Convert to TestNG
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Hirachy of TestNG XML file as below
------------------------------------------------------------------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
  <test thread-count="5" name="Test">
    <classes>
      <class name="test.day1"/>
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Collection of Test Folders is nothing but Test Suite
you can modularise the test cases based up on the functionality and trigger them accordingly.
Prioritizing the test cases with TestNG
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Loan Department">
  <test thread-count="5" name="Personal Loan">
    <classes>
      <class name="test.day1"/>
      <class name="test.day2"/>
      <class name="test.day4"/>
    </classes>
  </test> 
   <test thread-count="5" name="Car Loan">
    <classes>
      <class name="test.day3"/>
    </classes>
  </test>
  <!-- Test -->
</suite> <!-- Suite -->
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Include and Exclude Mechanism
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
If we want to skip any one test case then we can use exclude
you can also get a control of running specific methods from test case
Inside class tag we can use anther tag as method and mention the method name to exclude
 <test thread-count="5" name="Car Loan">
    <classes>
    
      <class name="test.day3">
      <methods>
      	<exclude name="mobileLoginCarLoan"></exclude>
      </methods>
      </class>
    </classes>
  </test>
Above day3 class all methods will execute except mobileLoginCarLoan  method
Same like exclude we can use include to run only those test methods
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Loan Department">
  <test thread-count="5" name="Personal Loan">
    <classes>
      <class name="test.day1">
      <methods>
      <include name="Demo"></include>
      </methods>
      </class>
      <class name="test.day2"/>
      <class name="test.day4"/>
    </classes>
  </test> 
   <test thread-count="5" name="Car Loan">
    <classes>
    
      <class name="test.day3">
      <methods>
      	<exclude name="mobileLoginCarLoan"></exclude>
      </methods>
      </class>
    </classes>
  </test>
  <!-- Test -->
</suite> <!-- Suite -->
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Executing Test cases with Regular expression in TestNG
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
we can use method name as starts with somename and .*
we can use regular expression include and exclude
<test thread-count="5" name="Car Loan">
    <classes>
    
      <class name="test.day3">
      <methods>
      	<exclude name="mobile.*"></exclude>
      </methods>
      </class>
    </classes>
  </test>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Executing Package level test  cases:
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
It will execute all the test cases which  are mentioned under package name
We can use this like regression execution to execute all the required test cases
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Loan Department">
  <test thread-count="5" name="Personal Loan">
  <packages>
  <package name="test"></package>
  </packages>
  </test>
  <!-- Test -->
</suite> <!-- Suite -->
Above all the test packages classess will be executed
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TestNG Annotations part 1:
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
@BeforeTest: this will execute before all the @Test annotations methods in class.
                                      @BeforeTest
		public void preRequiste() {
		System.out.println("Executing Before Test method before all Test Annotations");
		}
Here the scope will be within test in testNG xml file
@AfterTest: this will execute after all the @Test annotations methods in class.


	@AfterTest
	public void prerequisteEnd() {
		System.out.println("After Test Annotation will execute after all the @Test Annotations");
	}
Here the scope will be within test in testNG xml file
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TestNG Annotations part 2:
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Suite will having whole TestNG xml
@BeforeSuite will execute before all the test methods in testNG xml file
@AfterSuite will execute once alll the test completes in all the test folder under testNG xml file.
We can use this annotation if we want to set some global environment variables
@BeforeSuite
	public void bfSuite() {
		System.out.println("Before suite annotation execute before all the test methods executes in testNG xml");
	}
@AfterSuite
	public void afSuite() {
		System.out.println("After suite annotation execute after all the test methods executes in testNG xml");
	}
@BeforeMethod will execute each and every method before
@AfterMethod  will execute each an every method after
@BeforeTest will execute before test of TestNG xml file and before method annotation will execute every test method in class
	@BeforeMethod
	public void beforeMethod() {
		System.out.println("Before method is executed before every test method");
	}
	@AfterMethod
	public void afterMethod() {
		System.out.println("After method is executed after every test method");
	}
@BeforeClass is used to execute any methods in the class
@AfterClass is used to execute any methods in the class after
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Groups in Testng:
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
When we have so many test cases and what to execute few common tests then we can use groups as
@Test(groups={"smoke"})
	@Test(groups= {"smoke"})
	public void pLoan() {
		System.out.println("pLaon method is executing from day2 class");
	}
TestNG xml:	
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Loan Department">
  <test thread-count="5" name="Regression">
  <groups>
  	<run>
  	<include name="smoke"></include>
  	</run>
  </groups>
    <classes>
      <class name="test.day1"/>
      <class name="test.day2"/>
      <class name="test.day4"/>
       <class name="test.day3"/>
    </classes>
  </test> 
  <!-- Test -->
</suite> <!-- Suite -->
Above we can use groups under test and mid of classes
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Annotations helper attributes in TestNG
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
dependsOnMethods:
------------------------
When we want to execute any method which is depended to execute first method then we can use dependsOnMethod
	@Test
	public void webLoginCarLoan() {
		System.out.println("Web Login Car");
	}
	@Test(dependsOnMethods= {"webLoginCarLoan"})
	public void loginAPICarLoan() {
		System.out.println("Login API Car");
	}
We can use multiple depends on methods as 
	@Test(dependsOnMethods= {"webLoginCarLoan","mobileLoginCarLoan"})
	public void loginAPICarLoan() {
		System.out.println("Login API Car");
	}
	@Test(groups= {"smoke"})
	public void mobileLoginCarLoan() {
		System.out.println("Mobile Login Car");
	}
enabled:
--------------------
this attribute under Test annotation used to skip any test case as enabled=false
	@Test(enabled=false)
	public void mobileSignInCarLoan() {
		System.out.println("Mobile SignIn Car");
	}
timeout:
------------------
if any test case is failing we can use timeout attribute in Test annotation so that it will wait till the time mentioned
	@Test(timeOut=4000)
	public void mobileSignOutCarLoan() {
		System.out.println("Mobile Signout Car");
	}
Above method will not fail till 4000 time, it will wait that much time.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Parametrizing in TestNG xml file:
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
We can actually parametrise the values and drive the data from TestNG xml file.
We can use for global variables, environment application, 
we can use suite level and test level this pparametrize
	@Parameters({"URL"})
	@Test
	public void webLoginCarLoan(String urlName) {
		System.out.println("Web Login Car");
		System.out.println(urlName);
	}
Above URL is applicable for thiis method
we can use multiple parameters values also like below
	@Parameters({"URL","UserName"})
	@Test
	public void webLoginCarLoan(String urlName,String userName) {
		System.out.println("Web Login Car");
		System.out.println(urlName);
		System.out.println(userName)
	}
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Loan Department">
<parameter name="URL" value="qaclickacademy.com"/>
  <test thread-count="5" name="Personal Loan">
	<parameter name="PLURL" value="personalloan.com"/>
    <classes>
      <class name="test.day1">
      <methods>
      <include name="Demo"></include>
      </methods>
      </class>
      <class name="test.day2"/>
      <class name="test.day4"/>
    </classes>
  </test> 
   <test thread-count="5" name="Car Loan">
    <classes>
    
      <class name="test.day3">
      <methods>
      	<exclude name="mobile.*"></exclude>
      </methods>
      </class>
    </classes>
  </test>
  <!-- Test -->
</suite> <!-- Suite -->
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Data provider parameterizing Testcases 1:
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Parameterizing with mutliple data sets by running tests with multiple combination 
for this we can dataprovider annotation
	@Test(dataProvider="getData")
	public void mobileSignOutCarLoan(String userName,String password) {
		System.out.println("Mobile Signout Car");
		System.out.println(userName);
		System.out.println(password);
	}
	@DataProvider
	public Object[][] getData() {
		//1st combination first user name and password
		Object[][] data=new Object[3][2];
		//1st Data set
		data[0][0]="firstSetUserName";
		data[0][1]="firstPassword";
		//2st Data set
		data[1][0]="secondSetUserName";
		data[1][1]="secondPassword";
		//3st Data set
		data[2][0]="thirdSetUserName";
		data[2][1]="thirdPassword";
		return data;
	}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TestNG Listeners
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ITestListener is an interface which have all the methods for the TestNG listeners
After Suite in TestNG xml we need to give like 
<listeners>
<listener class-name="test.Listeners"/>
</listeners>
package test;

import org.testng.ITestListener;
import org.testng.ITestResult;

//ITestListener is an interface which implements TestNG listeners
public class Listeners implements ITestListener{

	@Override
	public void onTestStart(ITestResult result) {
		// TODO Auto-generated method stub
		ITestListener.super.onTestStart(result);
	}

	@Override
	public void onTestSuccess(ITestResult result) {
		// TODO Auto-generated method stub
		System.out.println("I Successfully executed listeners pass code");
	}

	@Override
	public void onTestFailure(ITestResult result) {
		// TODO Auto-generated method stub
		//screenshot code
	}

	@Override
	public void onTestSkipped(ITestResult result) {
		// TODO Auto-generated method stub
		ITestListener.super.onTestSkipped(result);
	}
	
	
}
When you catch listeners how do you know the test case name, we can have iTestResult describes the result of a test
result.getName()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Running Test in parallel with TestNG
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
We can use suite level as parallel="tests"
thread-count=2 to run two tests together 
<suite name="Loan Department" parallel="tests" thread-count="5"
Even we can run classes as parallel
<suite name="Loan Department" parallel="classes" thread-count="5"
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------